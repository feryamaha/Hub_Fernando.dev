{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/fernandomoreira/Documents/DevProj/Hub_Fernando.dev/src/components/shared/RotatingText.jsx\",\n  _s = $RefreshSig$();\nimport { forwardRef, useCallback, useEffect, useImperativeHandle, useMemo, useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport \"./RotatingText.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction cn(...classes) {\n  return classes.filter(Boolean).join(\" \");\n}\nconst RotatingText = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n  const {\n    texts,\n    transition = {\n      type: \"spring\",\n      damping: 25,\n      stiffness: 300\n    },\n    initial = {\n      y: \"100%\",\n      opacity: 0\n    },\n    animate = {\n      y: 0,\n      opacity: 1\n    },\n    exit = {\n      y: \"-120%\",\n      opacity: 0\n    },\n    animatePresenceMode = \"wait\",\n    animatePresenceInitial = false,\n    rotationInterval = 2000,\n    staggerDuration = 0,\n    staggerFrom = \"first\",\n    loop = true,\n    auto = true,\n    splitBy = \"characters\",\n    onNext,\n    mainClassName,\n    splitLevelClassName,\n    elementLevelClassName,\n    ...rest\n  } = props;\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n  const splitIntoCharacters = text => {\n    if (typeof Intl !== \"undefined\" && Intl.Segmenter) {\n      const segmenter = new Intl.Segmenter(\"en\", {\n        granularity: \"grapheme\"\n      });\n      return Array.from(segmenter.segment(text), segment => segment.segment);\n    }\n    return Array.from(text);\n  };\n  const elements = useMemo(() => {\n    const currentText = texts[currentTextIndex];\n    if (splitBy === \"characters\") {\n      const words = currentText.split(\" \");\n      return words.map((word, i) => ({\n        characters: splitIntoCharacters(word),\n        needsSpace: i !== words.length - 1\n      }));\n    }\n    if (splitBy === \"words\") {\n      return currentText.split(\" \").map((word, i, arr) => ({\n        characters: [word],\n        needsSpace: i !== arr.length - 1\n      }));\n    }\n    if (splitBy === \"lines\") {\n      return currentText.split(\"\\n\").map((line, i, arr) => ({\n        characters: [line],\n        needsSpace: i !== arr.length - 1\n      }));\n    }\n    return currentText.split(splitBy).map((part, i, arr) => ({\n      characters: [part],\n      needsSpace: i !== arr.length - 1\n    }));\n  }, [texts, currentTextIndex, splitBy]);\n  const getStaggerDelay = useCallback((index, totalChars) => {\n    const total = totalChars;\n    if (staggerFrom === \"first\") return index * staggerDuration;\n    if (staggerFrom === \"last\") return (total - 1 - index) * staggerDuration;\n    if (staggerFrom === \"center\") {\n      const center = Math.floor(total / 2);\n      return Math.abs(center - index) * staggerDuration;\n    }\n    if (staggerFrom === \"random\") {\n      const randomIndex = Math.floor(Math.random() * total);\n      return Math.abs(randomIndex - index) * staggerDuration;\n    }\n    return Math.abs(staggerFrom - index) * staggerDuration;\n  }, [staggerFrom, staggerDuration]);\n  const handleIndexChange = useCallback(newIndex => {\n    setCurrentTextIndex(newIndex);\n    if (onNext) onNext(newIndex);\n  }, [onNext]);\n  const next = useCallback(() => {\n    const nextIndex = currentTextIndex === texts.length - 1 ? loop ? 0 : currentTextIndex : currentTextIndex + 1;\n    if (nextIndex !== currentTextIndex) {\n      handleIndexChange(nextIndex);\n    }\n  }, [currentTextIndex, texts.length, loop, handleIndexChange]);\n  const previous = useCallback(() => {\n    const prevIndex = currentTextIndex === 0 ? loop ? texts.length - 1 : currentTextIndex : currentTextIndex - 1;\n    if (prevIndex !== currentTextIndex) {\n      handleIndexChange(prevIndex);\n    }\n  }, [currentTextIndex, texts.length, loop, handleIndexChange]);\n  const jumpTo = useCallback(index => {\n    const validIndex = Math.max(0, Math.min(index, texts.length - 1));\n    if (validIndex !== currentTextIndex) {\n      handleIndexChange(validIndex);\n    }\n  }, [texts.length, currentTextIndex, handleIndexChange]);\n  const reset = useCallback(() => {\n    if (currentTextIndex !== 0) {\n      handleIndexChange(0);\n    }\n  }, [currentTextIndex, handleIndexChange]);\n  useImperativeHandle(ref, () => ({\n    next,\n    previous,\n    jumpTo,\n    reset\n  }), [next, previous, jumpTo, reset]);\n  useEffect(() => {\n    if (!auto) return;\n    const intervalId = setInterval(next, rotationInterval);\n    return () => clearInterval(intervalId);\n  }, [next, rotationInterval, auto]);\n  return /*#__PURE__*/_jsxDEV(motion.span, {\n    className: cn(\"text-rotate\", mainClassName),\n    ...rest,\n    layout: true,\n    transition: transition,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-rotate-sr-only\",\n      children: texts[currentTextIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatePresence, {\n      mode: animatePresenceMode,\n      initial: animatePresenceInitial,\n      children: /*#__PURE__*/_jsxDEV(motion.div, {\n        className: cn(splitBy === \"lines\" ? \"text-rotate-lines\" : \"text-rotate\"),\n        layout: true,\n        \"aria-hidden\": \"true\",\n        children: elements.map((wordObj, wordIndex, array) => {\n          const previousCharsCount = array.slice(0, wordIndex).reduce((sum, word) => sum + word.characters.length, 0);\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: cn(\"text-rotate-word\", splitLevelClassName),\n            children: [wordObj.characters.map((char, charIndex) => /*#__PURE__*/_jsxDEV(motion.span, {\n              initial: initial,\n              animate: animate,\n              exit: exit,\n              transition: {\n                ...transition,\n                delay: getStaggerDelay(previousCharsCount + charIndex, array.reduce((sum, word) => sum + word.characters.length, 0))\n              },\n              className: cn(\"text-rotate-element\", elementLevelClassName),\n              children: char\n            }, charIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 19\n            }, this)), wordObj.needsSpace && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-rotate-space\",\n              children: \" \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 19\n            }, this)]\n          }, wordIndex, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 15\n          }, this);\n        })\n      }, currentTextIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n}, \"igc7VDShIH5ExhXYZmXUH3baqwE=\")), \"igc7VDShIH5ExhXYZmXUH3baqwE=\");\n_c2 = RotatingText;\nRotatingText.displayName = \"RotatingText\";\nexport default RotatingText;\nvar _c, _c2;\n$RefreshReg$(_c, \"RotatingText$forwardRef\");\n$RefreshReg$(_c2, \"RotatingText\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","forwardRef","useCallback","useEffect","useImperativeHandle","useMemo","useState","motion","AnimatePresence","jsxDEV","_jsxDEV","cn","classes","filter","Boolean","join","RotatingText","_c","props","ref","texts","transition","type","damping","stiffness","initial","y","opacity","animate","exit","animatePresenceMode","animatePresenceInitial","rotationInterval","staggerDuration","staggerFrom","loop","auto","splitBy","onNext","mainClassName","splitLevelClassName","elementLevelClassName","rest","currentTextIndex","setCurrentTextIndex","splitIntoCharacters","text","Intl","Segmenter","segmenter","granularity","Array","from","segment","elements","currentText","words","split","map","word","i","characters","needsSpace","length","arr","line","part","getStaggerDelay","index","totalChars","total","center","Math","floor","abs","randomIndex","random","handleIndexChange","newIndex","next","nextIndex","previous","prevIndex","jumpTo","validIndex","max","min","reset","intervalId","setInterval","clearInterval","span","className","layout","children","fileName","lineNumber","columnNumber","mode","div","wordObj","wordIndex","array","previousCharsCount","slice","reduce","sum","char","charIndex","delay","_c2","displayName","$RefreshReg$"],"sources":["/Users/fernandomoreira/Documents/DevProj/Hub_Fernando.dev/src/components/shared/RotatingText.jsx"],"sourcesContent":["\"use client\";\n\nimport {\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nimport \"./RotatingText.css\";\n\nfunction cn(...classes) {\n  return classes.filter(Boolean).join(\" \");\n}\n\nconst RotatingText = forwardRef((props, ref) => {\n  const {\n    texts,\n    transition = { type: \"spring\", damping: 25, stiffness: 300 },\n    initial = { y: \"100%\", opacity: 0 },\n    animate = { y: 0, opacity: 1 },\n    exit = { y: \"-120%\", opacity: 0 },\n    animatePresenceMode = \"wait\",\n    animatePresenceInitial = false,\n    rotationInterval = 2000,\n    staggerDuration = 0,\n    staggerFrom = \"first\",\n    loop = true,\n    auto = true,\n    splitBy = \"characters\",\n    onNext,\n    mainClassName,\n    splitLevelClassName,\n    elementLevelClassName,\n    ...rest\n  } = props;\n\n  const [currentTextIndex, setCurrentTextIndex] = useState(0);\n\n  const splitIntoCharacters = (text) => {\n    if (typeof Intl !== \"undefined\" && Intl.Segmenter) {\n      const segmenter = new Intl.Segmenter(\"en\", { granularity: \"grapheme\" });\n      return Array.from(segmenter.segment(text), (segment) => segment.segment);\n    }\n    return Array.from(text);\n  };\n\n  const elements = useMemo(() => {\n    const currentText = texts[currentTextIndex];\n    if (splitBy === \"characters\") {\n      const words = currentText.split(\" \");\n      return words.map((word, i) => ({\n        characters: splitIntoCharacters(word),\n        needsSpace: i !== words.length - 1,\n      }));\n    }\n    if (splitBy === \"words\") {\n      return currentText.split(\" \").map((word, i, arr) => ({\n        characters: [word],\n        needsSpace: i !== arr.length - 1,\n      }));\n    }\n    if (splitBy === \"lines\") {\n      return currentText.split(\"\\n\").map((line, i, arr) => ({\n        characters: [line],\n        needsSpace: i !== arr.length - 1,\n      }));\n    }\n    return currentText.split(splitBy).map((part, i, arr) => ({\n      characters: [part],\n      needsSpace: i !== arr.length - 1,\n    }));\n  }, [texts, currentTextIndex, splitBy]);\n\n  const getStaggerDelay = useCallback(\n    (index, totalChars) => {\n      const total = totalChars;\n      if (staggerFrom === \"first\") return index * staggerDuration;\n      if (staggerFrom === \"last\") return (total - 1 - index) * staggerDuration;\n      if (staggerFrom === \"center\") {\n        const center = Math.floor(total / 2);\n        return Math.abs(center - index) * staggerDuration;\n      }\n      if (staggerFrom === \"random\") {\n        const randomIndex = Math.floor(Math.random() * total);\n        return Math.abs(randomIndex - index) * staggerDuration;\n      }\n      return Math.abs(staggerFrom - index) * staggerDuration;\n    },\n    [staggerFrom, staggerDuration]\n  );\n\n  const handleIndexChange = useCallback(\n    (newIndex) => {\n      setCurrentTextIndex(newIndex);\n      if (onNext) onNext(newIndex);\n    },\n    [onNext]\n  );\n\n  const next = useCallback(() => {\n    const nextIndex =\n      currentTextIndex === texts.length - 1\n        ? loop\n          ? 0\n          : currentTextIndex\n        : currentTextIndex + 1;\n    if (nextIndex !== currentTextIndex) {\n      handleIndexChange(nextIndex);\n    }\n  }, [currentTextIndex, texts.length, loop, handleIndexChange]);\n\n  const previous = useCallback(() => {\n    const prevIndex =\n      currentTextIndex === 0\n        ? loop\n          ? texts.length - 1\n          : currentTextIndex\n        : currentTextIndex - 1;\n    if (prevIndex !== currentTextIndex) {\n      handleIndexChange(prevIndex);\n    }\n  }, [currentTextIndex, texts.length, loop, handleIndexChange]);\n\n  const jumpTo = useCallback(\n    (index) => {\n      const validIndex = Math.max(0, Math.min(index, texts.length - 1));\n      if (validIndex !== currentTextIndex) {\n        handleIndexChange(validIndex);\n      }\n    },\n    [texts.length, currentTextIndex, handleIndexChange]\n  );\n\n  const reset = useCallback(() => {\n    if (currentTextIndex !== 0) {\n      handleIndexChange(0);\n    }\n  }, [currentTextIndex, handleIndexChange]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      next,\n      previous,\n      jumpTo,\n      reset,\n    }),\n    [next, previous, jumpTo, reset]\n  );\n\n  useEffect(() => {\n    if (!auto) return;\n    const intervalId = setInterval(next, rotationInterval);\n    return () => clearInterval(intervalId);\n  }, [next, rotationInterval, auto]);\n\n  return (\n    <motion.span\n      className={cn(\"text-rotate\", mainClassName)}\n      {...rest}\n      layout\n      transition={transition}\n    >\n      <span className=\"text-rotate-sr-only\">{texts[currentTextIndex]}</span>\n      <AnimatePresence mode={animatePresenceMode} initial={animatePresenceInitial}>\n        <motion.div\n          key={currentTextIndex}\n          className={cn(\n            splitBy === \"lines\" ? \"text-rotate-lines\" : \"text-rotate\"\n          )}\n          layout\n          aria-hidden=\"true\"\n        >\n          {elements.map((wordObj, wordIndex, array) => {\n            const previousCharsCount = array\n              .slice(0, wordIndex)\n              .reduce((sum, word) => sum + word.characters.length, 0);\n            return (\n              <span\n                key={wordIndex}\n                className={cn(\"text-rotate-word\", splitLevelClassName)}\n              >\n                {wordObj.characters.map((char, charIndex) => (\n                  <motion.span\n                    key={charIndex}\n                    initial={initial}\n                    animate={animate}\n                    exit={exit}\n                    transition={{\n                      ...transition,\n                      delay: getStaggerDelay(\n                        previousCharsCount + charIndex,\n                        array.reduce(\n                          (sum, word) => sum + word.characters.length,\n                          0\n                        )\n                      ),\n                    }}\n                    className={cn(\"text-rotate-element\", elementLevelClassName)}\n                  >\n                    {char}\n                  </motion.span>\n                ))}\n                {wordObj.needsSpace && (\n                  <span className=\"text-rotate-space\"> </span>\n                )}\n              </span>\n            );\n          })}\n        </motion.div>\n      </AnimatePresence>\n    </motion.span>\n  );\n});\n\nRotatingText.displayName = \"RotatingText\";\nexport default RotatingText; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}