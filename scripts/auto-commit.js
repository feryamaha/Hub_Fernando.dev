/**
 * Script de Auto-Commit e Deploy
 * 
 * ESCopo e L√≥gica do Processo:
 * 
 * 1. IN√çCIO MANUAL:
 *    - Usu√°rio executa 'yarn build' manualmente no terminal
 *    - Isso gera um novo bundle na pasta 'dist'
 * 
 * 2. PROCESSO AUTOM√ÅTICO:
 *    - Script detecta o novo bundle gerado na pasta 'dist'
 *    - Inicia o servidor de desenvolvimento (yarn dev)
 *    - Aguarda 30 segundos para verifica√ß√£o manual da p√°gina de teste
 *    - Se n√£o houver interrup√ß√£o manual (Ctrl+C), prossegue com:
 *      * Cria commit com o nome do bundle detectado
 *      * Faz push com rebase para main
 *      * Atualiza gh-pages usando o pacote gh-pages
 * 
 * 3. ESTADO FINAL:
 *    - Servidor de desenvolvimento continua rodando
 *    - Altera√ß√µes s√£o commitadas e enviadas para o reposit√≥rio
 *    - Branch gh-pages √© atualizada automaticamente
 * 
 * OBSERVA√á√ïES IMPORTANTES:
 * - O push usa --rebase para manter o hist√≥rico limpo
 * - O usu√°rio tem 30 segundos para verificar a p√°gina de teste
 * - Se encontrar problemas, interrompa manualmente com Ctrl+C
 * - O servidor continua rodando at√© ser interrompido manualmente
 */

const fs = require('fs');
const { execSync, spawn } = require('child_process');
const path = require('path');

// Fun√ß√£o para encontrar o arquivo bundle mais recente
function findLatestBundle() {
    const distDir = path.join(__dirname, '../dist');

    if (!fs.existsSync(distDir)) {
        console.error('‚ùå Diret√≥rio dist n√£o encontrado. Execute YARN BUILD primeiro.');
        return null;
    }

    const files = fs.readdirSync(distDir);
    const bundleFiles = files.filter(file =>
        file.startsWith('bundle') && file.endsWith('.js')
    );

    if (bundleFiles.length === 0) {
        console.error('‚ùå Nenhum arquivo bundle encontrado na pasta dist');
        return null;
    }

    return bundleFiles.reduce((latest, current) => {
        const latestPath = path.join(distDir, latest);
        const currentPath = path.join(distDir, current);
        return fs.statSync(latestPath).mtime > fs.statSync(currentPath).mtime ? latest : current;
    });
}

// Fun√ß√£o para esperar um tempo espec√≠fico
function wait(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Fun√ß√£o para iniciar o servidor de desenvolvimento
async function startDevServer() {
    return new Promise((resolve, reject) => {
        console.log('üöÄ Iniciando servidor de desenvolvimento...');

        try {
            const dev = spawn('yarn', ['dev'], {
                stdio: 'inherit',
                shell: true,
                windowsHide: false
            });

            dev.on('error', (error) => {
                console.error('‚ùå Erro ao iniciar servidor de desenvolvimento:', error.message);
                reject(error);
            });

            // Resolve imediatamente para continuar o processo
            // O servidor continuar√° rodando em background
            resolve();
        } catch (error) {
            console.error('‚ùå Erro ao iniciar servidor de desenvolvimento:', error.message);
            reject(error);
        }
    });
}

// Fun√ß√£o para fazer o commit e atualizar o reposit√≥rio
async function makeCommitAndPush(bundleName) {
    try {
        // Adiciona todas as altera√ß√µes
        execSync('git add .', { stdio: 'inherit' });

        // Cria o commit com o nome do bundle
        const commitMessage = `build: novo hash/bundle gerado - ${bundleName}`;
        execSync(`git commit -m "${commitMessage}"`, { stdio: 'inherit' });

        // Pull com rebase antes do push
        console.log('üîÑ Atualizando branch local com rebase...');
        execSync('git pull --rebase origin main', { stdio: 'inherit' });

        // Push para a branch main (com rebase)
        console.log('‚¨ÜÔ∏è Enviando altera√ß√µes para a branch main...');
        execSync('git push origin main', { stdio: 'inherit' });

        // Atualiza gh-pages usando o pacote gh-pages
        console.log('üöÄ Atualizando gh-pages...');
        execSync('yarn gh-pages -d dist', { stdio: 'inherit' });

        console.log(`‚úÖ Processo realizado com sucesso para o bundle: ${bundleName}`);
    } catch (error) {
        console.error('‚ùå Erro durante o processo:', error.message);
    }
}

// Fun√ß√£o principal
async function main() {
    try {
        console.log('üîç Verificando novo bundle...');

        // Encontra o novo bundle gerado
        const latestBundle = findLatestBundle();
        if (!latestBundle) {
            console.log('‚ùå Nenhum arquivo bundle encontrado na pasta dist');
            return;
        }

        console.log(`üì¶ Bundle encontrado: ${latestBundle}`);

        // Inicia o servidor de desenvolvimento primeiro
        await startDevServer();

        // Aguarda 30 segundos para verifica√ß√£o manual
        console.log('‚è±Ô∏è Aguardando 30 segundos para verifica√ß√£o da p√°gina de teste...');
        console.log('‚ö†Ô∏è Se encontrar problemas, interrompa o processo com Ctrl+C');

        // Contagem regressiva de 30 segundos
        let secondsLeft = 30;
        const countdownInterval = setInterval(() => {
            secondsLeft--;
            if (secondsLeft > 0) {
                console.log(`‚è±Ô∏è Tempo restante para verifica√ß√£o: ${secondsLeft} segundos`);
            } else {
                clearInterval(countdownInterval);
                console.log('‚úÖ Tempo de verifica√ß√£o conclu√≠do. Prosseguindo com o commit e deploy...');
            }
        }, 1000);

        // Aguarda 30 segundos
        await wait(30000);
        clearInterval(countdownInterval);

        // Faz o commit e atualiza o reposit√≥rio
        await makeCommitAndPush(latestBundle);

        console.log('‚úÖ Autocommit e atualiza√ß√£o do gh-pages realizada com sucesso!');
        console.log('üöÄ O servidor de desenvolvimento continua rodando. Para interromper, pressione Ctrl+C.');
    } catch (error) {
        console.error('‚ùå Erro durante o processo:', error.message);
    }
}

// Executa o script
console.log('üîÑ Iniciando script de auto-commit...');
main(); 